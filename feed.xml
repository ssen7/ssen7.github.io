<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://ssen7.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ssen7.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-07-31T01:55:18+00:00</updated><id>https://ssen7.github.io/feed.xml</id><title type="html">blank</title><subtitle>Personal blog for Saurav Sengupta </subtitle><entry><title type="html">Getting the Million Songs dataset from AWS hosted S3 bucket</title><link href="https://ssen7.github.io/blog/2019/get-million-songs/" rel="alternate" type="text/html" title="Getting the Million Songs dataset from AWS hosted S3 bucket"/><published>2019-03-26T00:00:00+00:00</published><updated>2019-03-26T00:00:00+00:00</updated><id>https://ssen7.github.io/blog/2019/get-million-songs</id><content type="html" xml:base="https://ssen7.github.io/blog/2019/get-million-songs/"><![CDATA[<p>This post is related to my project at UVA, that is, classifying songs into one of thirteen genres using song features and lyrical data. Normally, most Music Genre classification projects use the GTZAN dataset which consists of 1000 songs, with 100 songs each for the 10 genres.</p> <p>However, we are ambitious people. We found the <a href="https://labrosa.ee.columbia.edu/millionsong/">Million Songs Dataset</a> published by <a href="https://labrosa.ee.columbia.edu/">LabROSA</a> group at Columbia. It was freely available on a <a href="https://aws.amazon.com/datasets/million-song-dataset/">AWS mounted snapshot</a>.</p> <p>So, I knew how to connect to AWS EC2 and run a Jupyter notebook on it. For more details check out my post <a href="/blog/2019/aws-putty-post/">here</a>.</p> <p>The other part was figuring out how to connect to the snapshot. It turned out to be kind of easy.</p> <p>Here are the steps:</p> <ul> <li> <p>Choose the Amazon Machine Image of your choice. I chose the most basic one, since I knew I could install Anaconda anytime. It is time consuming though. You can go for one of the Deep Learning AMIs also.</p> </li> <li> <p>Go to Add Storage. Attach the Million Songs Dataset to your EC2 instance by clicking on Add New Volume and searching for the million songs snapshot. Make note of the <strong>device name</strong>. Its <strong>/dev/sdb/</strong> as shown here.</p> </li> </ul> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/aws_ms_2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/aws_ms_2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/aws_ms_2-1400.webp"/> <img src="/assets/img/aws_ms_2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li>Then enter the following commands one after the another.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> /mnt/snap

<span class="nb">sudo </span>mount <span class="nt">-t</span> ext4 /dev/xvdb /mnt/snap
</code></pre></div></div> <p>If all goes well it should look something like this:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/aws_ms_3-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/aws_ms_3-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/aws_ms_3-1400.webp"/> <img src="/assets/img/aws_ms_3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Et voila, you are done.</p> <p>Now, see <a href="https://github.com/ssen7/sys6018-final-project/blob/master/data_gathering_scripts/data_exploration_script.ipynb">this Jupyter notebook</a> for getting the data into a csv file.</p>]]></content><author><name></name></author><category term="AWS"/><category term="python,"/><category term="aws,"/><category term="jupyter,"/><category term="ec2"/><summary type="html"><![CDATA[Getting the Million Songs dataset into a csv file.]]></summary></entry><entry><title type="html">Run Jupyter notebook on AWS EC2 using Putty</title><link href="https://ssen7.github.io/blog/2019/aws-putty-post/" rel="alternate" type="text/html" title="Run Jupyter notebook on AWS EC2 using Putty"/><published>2019-03-25T00:00:00+00:00</published><updated>2019-03-25T00:00:00+00:00</updated><id>https://ssen7.github.io/blog/2019/aws-putty-post</id><content type="html" xml:base="https://ssen7.github.io/blog/2019/aws-putty-post/"><![CDATA[<p>This post originates from my frustrations while installing and working with Open Slide in a Windows machine. For some reason I could not get it to work.</p> <p>Since most packages for openslide-python, the package I required, are written for Linux, I needed a Linux machine. That and my hesitation to dual boot my laptop with Linux, made me look towards Amazon Web Services.</p> <p>AWS provides free tier instances for EC2 instances for free for a year after initial sign up. This was a good opportunity to use this free service.</p> <p>What I figured out was a very convoluted process to run a Jupyter notebook on a free Linux machine.</p> <p>But hey, we are learning right?</p> <p>With that disclaimer out of the way, lets jump in.</p> <h3 id="create-an-aws-ec2-instance">Create an AWS EC2 instance</h3> <p>Creating an EC2 instance is as straightforward as logging into the AWS Console and choosing any of the free tier instances available. I chose to go for the most basic instance, since that would suffice for my needs.</p> <p>The tricky part however is connecting to AWS and running a Jupyter notebook through your Windows machine.</p> <p>Here comes Putty (horrible name) to the rescue.</p> <h3 id="install-putty">Install Putty</h3> <p><a href="https://www.putty.org/">Download putty</a> and install it on your windows machine. Pretty standard stuff.</p> <h3 id="connecting-to-ec2-via-putty">Connecting to EC2 via Putty.</h3> <p>When you login to AWS Console and navigate to the EC2 service, you will see something like this</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/ec2-resources-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/ec2-resources-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/ec2-resources-1400.webp"/> <img src="/assets/img/ec2-resources.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>If you already have a key pair, then you should have saved it somewhere on your local system, since you cannot download it again.</p> <p>If you don’t, you can always create a new pair. Download the .pem file and save it to a folder in your local machine.</p> <p>We are doing all this since we need a public-private key pair to actually make a connection to EC2 instance via SSH.</p> <h4 id="convert-pem-to-ppk-file-format">Convert .pem to .ppk file format</h4> <p>Since Putty cannot use .pem file format, we need to convert it to a useable format.</p> <p>Here is a good stack overflow answer to help you through.</p> <p><a href="https://stackoverflow.com/questions/3190667/convert-pem-to-ppk-file-format">https://stackoverflow.com/questions/3190667/convert-pem-to-ppk-file-format</a></p> <p>At the end of this you should have a public-private key pair saved safely in your local system.</p> <p>Now we can start configuring Putty to connect to our EC2 instance.</p> <h3 id="configuring-putty">Configuring Putty</h3> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/putty_clean-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/putty_clean-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/putty_clean-1400.webp"/> <img src="/assets/img/putty_clean.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This is what Putty looks like.</p> <p>Lets start.</p> <ul> <li>Since I used <strong>“Amazon Linux 2 AMI (HVM)”</strong>, the <strong>host name</strong> field in the interface is ec2-user@[IPV4 address]. IPV4 address is the one I highlighted in the picture below. Just select and copy.</li> </ul> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/aws_ipv4-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/aws_ipv4-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/aws_ipv4-1400.webp"/> <img src="/assets/img/aws_ipv4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>If you had used a Ubuntu instance, the host name would be ubuntu@[IPV4 address].</p> <ul> <li>Go to Connection -&gt; SSH -&gt; Auth and paste the path of your private key (.ppk file).</li> </ul> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/putty_auth-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/putty_auth-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/putty_auth-1400.webp"/> <img src="/assets/img/putty_auth.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This completes your basic setup.</p> <h3 id="tunneling-using-putty">Tunneling using Putty</h3> <p>This is the magic sauce that enable us to connect to Jupyter notebooks running on your AWS EC2 instance and it is deceptively easy.</p> <p>In your Putty interface, go to Connection -&gt; SSH -&gt; Tunnels.</p> <p>Normally Jupyter notebooks start on port 8888. Therefore we configure port forwarding accordingly.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/putty_port-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/putty_port-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/putty_port-1400.webp"/> <img src="/assets/img/putty_port.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>After filling the above fields, click on <strong>Add</strong>.</p> <p>One last step is saving your Putty session, so that we do not have to go through this again.</p> <p>Go back to <strong>Session</strong> in the Putty GUI, and in the <strong>Saved Sessions</strong> field, you can name your session as aws_ec2 and click on <strong>Save</strong>.</p> <p>Now if you click <strong>Open</strong>, you should be able to connect to the bash terminal of your running EC2 instance.</p> <p>It should look something like this.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/ec2_connect-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/ec2_connect-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/ec2_connect-1400.webp"/> <img src="/assets/img/ec2_connect.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="final-steps">Final Steps</h2> <p>Since you have access to the terminal of your EC2 instance, go ahead download the Anaconda Linux installer -</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://repo.anaconda.com/archive/Anaconda3-2018.12-Linux-x86_64.sh
</code></pre></div></div> <p>Next install Anaconda -</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash Anaconda3-2018.12-Linux-x86_64.sh
</code></pre></div></div> <p>This will install Jupyter and all other data science packages.</p> <p>Go ahead and launch your Jupyter notebook using -</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter notebook --no-browser
</code></pre></div></div> <p>It will create <strong>localhost:8888</strong> url in the shell with the token id attached.</p> <p>Paste that on the browser in your computer and see magic happen.</p>]]></content><author><name></name></author><category term="AWS"/><category term="aws,"/><category term="projects,"/><category term="ec2"/><summary type="html"><![CDATA[Steps to run Jupyter notebooks on EC2 machine. Handy when you don't want to use Sagemaker and install your own packages.]]></summary></entry><entry><title type="html">Making the (old) website using Pelican and GitHub Part 2</title><link href="https://ssen7.github.io/blog/2019/making-old-blog-2/" rel="alternate" type="text/html" title="Making the (old) website using Pelican and GitHub Part 2"/><published>2019-03-22T00:00:00+00:00</published><updated>2019-03-22T00:00:00+00:00</updated><id>https://ssen7.github.io/blog/2019/making-old-blog-2</id><content type="html" xml:base="https://ssen7.github.io/blog/2019/making-old-blog-2/"><![CDATA[<h3 id="note-this-post-is-part-of-the-old-blog-where-i-used-pelican-to-create-it-still-useful-for-archival-purposes">NOTE: This post is part of the old blog, where I used Pelican to create it, still useful for archival purposes</h3> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/default_theme_pelican-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/default_theme_pelican-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/default_theme_pelican-1400.webp"/> <img src="/assets/img/default_theme_pelican.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This is the default theme from Pelican, which looks fine and achieves most of the stuff you need.</p> <p>I needed a cleaner looking theme though and one that I could customize. Thus, started the hunt for the theme.</p> <h3 id="hunt-for-the-theme">Hunt for the theme</h3> <p>Here are the resources I found after Googling. Maybe you’ll find better.</p> <ul> <li><a href="https://github.com/getpelican/pelican-themes">https://github.com/getpelican/pelican-themes</a></li> <li><a href="http://www.pelicanthemes.com/">http://www.pelicanthemes.com/</a></li> </ul> <p>However, none of them seemed to look good to me. Also, most of them were updated a while ago, and might break in the future.</p> <p>The one which I liked was the <a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3">‘pelican-bootstrap3’</a> theme.Its regularly updated and <a href="https://github.com/getpelican/pelican-themes/blob/master/pelican-bootstrap3/EXAMPLES.md">widely used</a>.</p> <p>But I felt something was missing. So I turned elsewhere.</p> <p>I stumbled upon this <a href="https://www.svenkreiss.com/blog/pelican-2018/">blog post</a> by Sven Kreiss. I liked the website and the fact that both of us are kind of in the same domain. He is using a customized theme named ‘pure’ available <a href="https://github.com/svenkreiss/pure">here</a>.</p> <p>The pelican-themes github repo mentioned above also has a version of the <a href="https://github.com/danclaudiupop/pure/tree/9c58a20c1ed86a26c456ac1f3a736838b6409fc1">pure</a> theme, if you want to check that out.</p> <h3 id="decided-on-the-theme-what-now">Decided on the theme. What now?</h3> <p>Honestly, you can find a lot of themes in the wild online. However, there are some commonalities between all of them.</p> <p>What are those you might ask? Here we look at the all important <strong>pelicanconf.py</strong> file.</p> <h3 id="pelicanconfpy">pelicanconf.py</h3> <p>This file is generated after the quick start step and contains, as the name suggests, all the different configurations for your website.</p> <p>For example the SOCIAL variable. Here’s what it can look like:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SOCIAL</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">(</span><span class="sh">'</span><span class="s">twitter</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">https://twitter.com/sauravsen111</span><span class="sh">'</span><span class="p">),</span>
    <span class="p">(</span><span class="sh">'</span><span class="s">linkedin</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">https://www.linkedin.com/in/saurav-sengupta/</span><span class="sh">'</span><span class="p">),</span>
<span class="p">)</span>

</code></pre></div></div> <p>Which results in:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/default_theme_pelican-social-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/default_theme_pelican-social-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/default_theme_pelican-social-1400.webp"/> <img src="/assets/img/default_theme_pelican-social.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This ease of use is so awesome that it almost makes me believe in God. Its great living in the 21st century.</p> <p>Pelican does not have emoji support though.. so I am back to being…agnostic..?</p> <p>That went off-track soon. Back to website building. It gets tricky from here on out.</p> <h3 id="getting-the-themes-you-want">Getting the themes you want</h3> <p>Somewhere outside your checked out repository folder create a <strong>pelican-themes</strong> folder and checkout the theme you want. For example,</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/svenkreiss/pure.git
</code></pre></div></div> <p>or checkout the whole <a href="https://github.com/getpelican/pelican-themes">pelican-themes</a> repo, if you want to be that way about it.</p> <h3 id="installing-and-using-themes">Installing and using themes</h3> <p>Just do</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pelican-themes -i /path/to/themes/pure
</code></pre></div></div> <p>Check if the theme is installed</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pelican-themes -v -l
</code></pre></div></div> <p>Go to the <strong>pelicanconf.py</strong> file and do</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">THEME</span><span class="o">=</span><span class="sh">'</span><span class="s">pure</span><span class="sh">'</span>
</code></pre></div></div> <p>Generate the pages using</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pelican content -D -s pelicanconf.py -o output
</code></pre></div></div> <p>Barring any errors, your theme should start working the next time you start your server using</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make devserver
</code></pre></div></div> <h3 id="installing-and-using-plugins">Installing and using plugins</h3> <p>Go ahead and checkout the whole <a href="https://github.com/getpelican/pelican-plugins">pelican-plugins</a> GitHub repo in the folder of your choice.</p> <p>We will talk about the all purpose <a href="https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags">liquid_tags</a> plugin here.</p> <p>It has pretty good documentation on how to use it but still I’ll go over how to use it here.</p> <p>Add the following to your configuration file-</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PLUGIN_PATH</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/path/to/pelican-plugins</span><span class="sh">'</span>
<span class="n">PLUGINS</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">liquid_tags.img</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">liquid_tags.video</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">liquid_tags.youtube</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">liquid_tags.vimeo</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">liquid_tags.include_code</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">liquid_tags.notebook</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div> <p>To insert the image in your markdown use this inside your markdown-</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;figure&gt;</span>

  <span class="nt">&lt;picture&gt;</span>
    
    &lt;source 
        class="responsive-img-srcset"
        media="(max-width: 480px)" 
        srcset="/assets/img/blog_snapshot-480.webp"
      /&gt;
    &lt;source 
        class="responsive-img-srcset"
        media="(max-width: 800px)" 
        srcset="/assets/img/blog_snapshot-800.webp"
      /&gt;
    &lt;source 
        class="responsive-img-srcset"
        media="(max-width: 1400px)" 
        srcset="/assets/img/blog_snapshot-1400.webp"
      /&gt;
    <span class="sb">

    &lt;!-- Fallback to the original file --&gt;
    &lt;img 
      src="/assets/img/blog_snapshot.png"
      class="img-fluid rounded z-depth-1"  
      width="auto" 
      height="auto" 
       
       
       
       
       
       
      data-zoomable
      onerror="this.onerror=null; $('.responsive-img-srcset').remove();"
    /&gt;

</span>  <span class="nt">&lt;/picture&gt;</span>

<span class="nt">&lt;/figure&gt;</span>

</code></pre></div></div> <p>Hold up.</p> <p>Where do you store your images and files?</p> <h3 id="where-to-store-files-and-images">Where to store files and images</h3> <p>Create folders named <strong>images</strong> and <strong>files</strong> inside your content directory.</p> <p>Set the following parameter in your configuration file-</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">STATIC_PATHS</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">images</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">files</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div> <p>Put your images inside the <strong>images</strong> folder.</p> <p>Done.</p> <p>Phew.</p> <p>This part 2 should give you enough of a head-start to make a working, good looking website.</p> <p>Explore themes and other people who have used those themes to find out and learn more about the ones you want to use.</p> <p>Stay golden people. Peace.</p>]]></content><author><name></name></author><category term="builds"/><category term="pelican"/><summary type="html"><![CDATA[Part 2 of steps to create the {old} website using Pelican and GitHub. This post shows how to use Pelican themes and plugins.]]></summary></entry><entry><title type="html">Making the (old) website using Pelican and GitHub Part 1</title><link href="https://ssen7.github.io/blog/2019/making-old-blog/" rel="alternate" type="text/html" title="Making the (old) website using Pelican and GitHub Part 1"/><published>2019-03-21T00:00:00+00:00</published><updated>2019-03-21T00:00:00+00:00</updated><id>https://ssen7.github.io/blog/2019/making-old-blog</id><content type="html" xml:base="https://ssen7.github.io/blog/2019/making-old-blog/"><![CDATA[<h3 id="note-this-post-is-part-of-the-old-blog-where-i-used-pelican-to-create-it-still-useful-for-archival-purposes">NOTE: This post is part of the old blog, where I used Pelican to create it, still useful for archival purposes</h3> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog_snapshot-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog_snapshot-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog_snapshot-1400.webp"/> <img src="/assets/img/blog_snapshot.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Me and many other data science enthusiasts who want to showcase their work, need a platform to do it. I needed a platform that is easily updatable, customizable and supports jupyter notebooks.</p> <p>Pelican is a python based static site generator that fulfilled all the above criteria. It is open-source, has many plugins that can do things like add support for bibtex, can show jupyter notebooks and a whole lot else. Its also easy to customize without worrying about a lot of front end stuff.</p> <p>In a series of posts, I will detail the making of this website in the hopes that it might help some of you folks looking to make an easy to use website free of cost.</p> <h3 id="setup-your-githubio-repository-on-github">Setup your github.io repository on GitHub</h3> <p>On GitHub, create a new repository with the name username.github.io where username is your GitHub username. Do not worry about creating branches or some such. You can do it on your local system.</p> <h3 id="project-setup">Project Setup</h3> <p>Now create a folder where you can store all your website materials. This makes it easy to compartmentalize stuff. I named it <strong>WebApp</strong>.</p> <p>Inside this folder, open your terminal or command line, whatever you use for running git commands and clone your repository.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/YOUR_USERNAME/YOUR_USERNAME.github.io.git
</code></pre></div></div> <p>Go inside your repository.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd YOUR_USERNAME.github.io
</code></pre></div></div> <p>Create local branch named ‘pelican’ where you’ll store your pelican configuration files.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout -b pelican
</code></pre></div></div> <h3 id="install-pelican-and-other-helper-packages">Install Pelican and other helper packages</h3> <p>It is always a good idea to use separate environments for projects. I used Anaconda environments. You can use virtualenv also.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create --name mywebsite
</code></pre></div></div> <p>Activate this environment.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source activate mywebsite
</code></pre></div></div> <p>Now you can download the packages you need for making this website. PyPI or pip makes this a one step process.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install pelican markdown ghp-import
</code></pre></div></div> <h3 id="you-are-ready-to-start">You are ready to start!</h3> <p>Use</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pelican-quickstart
</code></pre></div></div> <p>Here is a screenshot of what options to choose.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/quickstart_snapshot-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/quickstart_snapshot-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/quickstart_snapshot-1400.webp"/> <img src="/assets/img/quickstart_snapshot.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Remember all of this is happening inside your USERNAME.github.io folder that you checked out before.</p> <p>Also, yes, I am doing all of this using <a href="https://tutorials.ubuntu.com/tutorial/tutorial-ubuntu-on-windows#0">Ubuntu for Windows</a>! Nifty little thing they did there.</p> <p>Your website is almost ready!</p> <h3 id="start-building-content">Start building content</h3> <p>Once the quickstart process is complete, there will be a folder called <strong>content</strong> created for you. Create a folder called <strong>posts</strong> inside this folder.</p> <p>Inside <strong>posts</strong> create a quick markdown file and fill it like the following.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Title: Welcome!
Date: 2019-03-21
Category: welcome
Tags: blog
Slug: welcome
Summary: Welcome to my blog where I talk about data minining, machine learning, reinforcement learning and other types of learning.
Status: published<span class="sb">


</span>Welcome to my personal blog!
</code></pre></div></div> <p>To see how it looks do the following:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make html &amp;&amp; make serve
</code></pre></div></div> <p>It should be up on <a href="http://localhost:8000">http://localhost:8000</a>.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/default_theme_pelican-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/default_theme_pelican-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/default_theme_pelican-1400.webp"/> <img src="/assets/img/default_theme_pelican.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="publishing-to-github">Publishing to GitHub</h3> <p>Before committing, its good practice to have a .gitignore file in your directory. My .gitignore looks like this.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## ignore files
/output/
/node_modules/
/__pycache__/
</code></pre></div></div> <p>I’ll address the ‘node_modules’ in a later post.</p> <p>Use the following commands one after the another to commit all of the generated stuff to GitHub.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add -A
git commit -m "my first blog"
git push
</code></pre></div></div> <p>What comes next will blow your mind!</p> <p>Using just one command, you can generate a working github.io website.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make github
</code></pre></div></div> <p>It usually takes a little bit of time to show up. But now you have a working website that you can show to others..</p> <p>Or maybe not. Your choice.</p> <p>Part 2 will cover adding themes and plugins to your Pelican website.</p> <p>Stay tuned.</p>]]></content><author><name></name></author><category term="builds"/><category term="pelican"/><summary type="html"><![CDATA[Part 1 of steps to create the {old} website using Pelican and GitHub. It covers making a basic Pelican blog.]]></summary></entry></feed>