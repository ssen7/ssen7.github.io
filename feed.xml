<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://ssen7.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ssen7.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-07-09T17:42:08+00:00</updated><id>https://ssen7.github.io/feed.xml</id><title type="html">blank</title><subtitle>Personal blog for Saurav Sengupta </subtitle><entry><title type="html">Run Jupyter notebook on AWS EC2 using Putty</title><link href="https://ssen7.github.io/blog/2019/aws-putty-post/" rel="alternate" type="text/html" title="Run Jupyter notebook on AWS EC2 using Putty"/><published>2019-03-25T00:00:00+00:00</published><updated>2019-03-25T00:00:00+00:00</updated><id>https://ssen7.github.io/blog/2019/aws-putty-post</id><content type="html" xml:base="https://ssen7.github.io/blog/2019/aws-putty-post/"><![CDATA[<p>This post originates from my frustrations while installing and working with Open Slide in a Windows machine. For some reason I could not get it to work.</p> <p>Since most packages for openslide-python, the package I required, are written for Linux, I needed a Linux machine. That and my hesitation to dual boot my laptop with Linux, made me look towards Amazon Web Services.</p> <p>AWS provides free tier instances for EC2 instances for free for a year after initial sign up. This was a good opportunity to use this free service.</p> <p>What I figured out was a very convoluted process to run a Jupyter notebook on a free Linux machine.</p> <p>But hey, we are learning right?</p> <p>With that disclaimer out of the way, lets jump in.</p> <h3 id="create-an-aws-ec2-instance">Create an AWS EC2 instance</h3> <p>Creating an EC2 instance is as straightforward as logging into the AWS Console and choosing any of the free tier instances available. I chose to go for the most basic instance, since that would suffice for my needs.</p> <p>The tricky part however is connecting to AWS and running a Jupyter notebook through your Windows machine.</p> <p>Here comes Putty (horrible name) to the rescue.</p> <h3 id="install-putty">Install Putty</h3> <p><a href="https://www.putty.org/">Download putty</a> and install it on your windows machine. Pretty standard stuff.</p> <h3 id="connecting-to-ec2-via-putty">Connecting to EC2 via Putty.</h3> <p>When you login to AWS Console and navigate to the EC2 service, you will see something like this</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/ec2-resources-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/ec2-resources-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/ec2-resources-1400.webp"/> <img src="/assets/img/ec2-resources.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>If you already have a key pair, then you should have saved it somewhere on your local system, since you cannot download it again.</p> <p>If you don’t, you can always create a new pair. Download the .pem file and save it to a folder in your local machine.</p> <p>We are doing all this since we need a public-private key pair to actually make a connection to EC2 instance via SSH.</p> <h4 id="convert-pem-to-ppk-file-format">Convert .pem to .ppk file format</h4> <p>Since Putty cannot use .pem file format, we need to convert it to a useable format.</p> <p>Here is a good stack overflow answer to help you through.</p> <p><a href="https://stackoverflow.com/questions/3190667/convert-pem-to-ppk-file-format">https://stackoverflow.com/questions/3190667/convert-pem-to-ppk-file-format</a></p> <p>At the end of this you should have a public-private key pair saved safely in your local system.</p> <p>Now we can start configuring Putty to connect to our EC2 instance.</p> <h3 id="configuring-putty">Configuring Putty</h3> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/putty_clean-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/putty_clean-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/putty_clean-1400.webp"/> <img src="/assets/img/putty_clean.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This is what Putty looks like.</p> <p>Lets start.</p> <ul> <li>Since I used <strong>“Amazon Linux 2 AMI (HVM)”</strong>, the <strong>host name</strong> field in the interface is ec2-user@[IPV4 address]. IPV4 address is the one I highlighted in the picture below. Just select and copy.</li> </ul> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/aws_ipv4-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/aws_ipv4-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/aws_ipv4-1400.webp"/> <img src="/assets/img/aws_ipv4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>If you had used a Ubuntu instance, the host name would be ubuntu@[IPV4 address].</p> <ul> <li>Go to Connection -&gt; SSH -&gt; Auth and paste the path of your private key (.ppk file).</li> </ul> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/putty_auth-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/putty_auth-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/putty_auth-1400.webp"/> <img src="/assets/img/putty_auth.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This completes your basic setup.</p> <h3 id="tunneling-using-putty">Tunneling using Putty</h3> <p>This is the magic sauce that enable us to connect to Jupyter notebooks running on your AWS EC2 instance and it is deceptively easy.</p> <p>In your Putty interface, go to Connection -&gt; SSH -&gt; Tunnels.</p> <p>Normally Jupyter notebooks start on port 8888. Therefore we configure port forwarding accordingly.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/putty_port-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/putty_port-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/putty_port-1400.webp"/> <img src="/assets/img/putty_port.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>After filling the above fields, click on <strong>Add</strong>.</p> <p>One last step is saving your Putty session, so that we do not have to go through this again.</p> <p>Go back to <strong>Session</strong> in the Putty GUI, and in the <strong>Saved Sessions</strong> field, you can name your session as aws_ec2 and click on <strong>Save</strong>.</p> <p>Now if you click <strong>Open</strong>, you should be able to connect to the bash terminal of your running EC2 instance.</p> <p>It should look something like this.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/ec2_connect-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/ec2_connect-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/ec2_connect-1400.webp"/> <img src="/assets/img/ec2_connect.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="final-steps">Final Steps</h2> <p>Since you have access to the terminal of your EC2 instance, go ahead download the Anaconda Linux installer -</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://repo.anaconda.com/archive/Anaconda3-2018.12-Linux-x86_64.sh
</code></pre></div></div> <p>Next install Anaconda -</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash Anaconda3-2018.12-Linux-x86_64.sh
</code></pre></div></div> <p>This will install Jupyter and all other data science packages.</p> <p>Go ahead and launch your Jupyter notebook using -</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter notebook --no-browser
</code></pre></div></div> <p>It will create <strong>localhost:8888</strong> url in the shell with the token id attached.</p> <p>Paste that on the browser in your computer and see magic happen.</p>]]></content><author><name></name></author><category term="AWS"/><category term="aws,"/><category term="projects,"/><category term="ec2"/><summary type="html"><![CDATA[Steps to run Jupyter notebooks on EC2 machine. Handy when you don't want to use Sagemaker and install your own packages.]]></summary></entry></feed>